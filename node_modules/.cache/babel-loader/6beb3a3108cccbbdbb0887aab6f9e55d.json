{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\Appsala React\\\\appsala\\\\src\\\\pages\\\\PrivateRoute.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Outlet, Navigate, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PrivateRoute(_ref) {\n  _s();\n\n  let {\n    isAuthenticated,\n    setIsAuthenticated\n  } = _ref;\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    // Perform logout logic, clear authentication state, and any cleanup tasks\n    setIsAuthenticated(false);\n    navigate('/'); // Optionally, clear tokens or session data here\n  };\n\n  if (isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 16\n    }, this);\n  }\n}\n\n_s(PrivateRoute, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/Users/Ali/Desktop/Appsala React/appsala/src/pages/PrivateRoute.jsx"],"names":["React","Outlet","Navigate","useNavigate","PrivateRoute","isAuthenticated","setIsAuthenticated","navigate","handleLogout"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA0BC,WAA1B,QAA6C,kBAA7C;;;;AAEA,SAASC,YAAT,OAA4D;AAAA;;AAAA,MAAtC;AAACC,IAAAA,eAAD;AAAiBC,IAAAA;AAAjB,GAAsC;AACxD,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;;AACA,QAAMK,YAAY,GAAG,MAAM;AACvB;AACAF,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAC,IAAAA,QAAQ,CAAC,GAAD,CAAR,CAHuB,CAIvB;AACD,GALH;;AAOA,MAAIF,eAAJ,EAAoB;AAChB,wBACA;AAAA,8BACA;AAAQ,QAAA,OAAO,EAAEG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA,oBADA;AAMH,GAPD,MAOM;AACF,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACJ;;GAnBQJ,Y;UACYD,W;;;KADZC,Y;AAqBT,eAAeA,YAAf","sourcesContent":["import React from 'react'\r\nimport { Outlet, Navigate,useNavigate } from 'react-router-dom'\r\n\r\nfunction PrivateRoute({isAuthenticated,setIsAuthenticated}) {\r\n    const navigate = useNavigate()\r\n    const handleLogout = () => {\r\n        // Perform logout logic, clear authentication state, and any cleanup tasks\r\n        setIsAuthenticated(false);\r\n        navigate('/')\r\n        // Optionally, clear tokens or session data here\r\n      };\r\n\r\n    if (isAuthenticated){\r\n        return(\r\n        <>\r\n        <button onClick={handleLogout}>Logout</button>\r\n        <Outlet/>\r\n        </>\r\n        )\r\n    } else{\r\n        return <Navigate to='/login'/>\r\n    }\r\n}\r\n\r\nexport default PrivateRoute"]},"metadata":{},"sourceType":"module"}